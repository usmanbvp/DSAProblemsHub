// Print inorder traversal of a binary tree using stack data structure

#include <iostream>
#include <stack>
using namepsace std;

class TreeNode {
public:
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class BinaryTree {
private:
    TreeNode* root;

public:
    BinaryTree() : root(NULL) {}

    // Insert a node into the binary tree
    void insert(int val) {
        root = insertNode(root, val);
    }

    // Inorder traversal
    void inorderTraversal() {
        inorderTraversal(root);
    }

private:
    TreeNode* insertNode(TreeNode* node, int val) {
        if (node == NULL) {
            return new TreeNode(val);
        }

        if (val < node->val) {
            node->left = insertNode(node->left, val);
        } else {
            node->right = insertNode(node->right, val);
        }

        return node;
    }

    void inorderTraversal(TreeNode* node) {
        if (node == NULL)
            return;

        stack<TreeNode*> nodeStack;

        while (node != NULL || !nodeStack.empty()) {
            while (node != NULL) {
                nodeStack.push(node);
                node = node->left;
            }

            node = nodeStack.top();
            nodeStack.pop();
            cout << node->val << " ";

            node = node->right;
        }
    }
};

int main() {
    BinaryTree tree;
    tree.insert(3);
    tree.insert(1);
    tree.insert(5);
    tree.insert(2);
    tree.insert(4);

    cout << "Inorder Traversal: ";
    tree.inorderTraversal();

    return 0;
}
